<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAAMQOAADEDgAAAAAAAAAA
        AAAYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgGGxgcGRUTIR0KbHYACTkSGhkRGhARFxYcFhsUGRgYGRUYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgaFxkdFxgAJiUkIi4ODTQAAO8CBP0G
        Af4AAPYGAPkABv4XGjY+t982ye8fGxoTFxwYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGRUYGBgAJFIGGBcAAPUJD4wOJCkWGRcYGBgYGBgYGBgYGBgWGBkQJC8PEpgKAv8TGR4b
        JCESGBcTGRgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgcGBcVIC4GGiUPCO0ADDIYGRcX
        FxcCAgIAAAEDEBIDAQECAAACERQAAAADAwMXFxcYGBgPECQGCvMN1f8BJC4ZFxcYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgaGBgKJSkSZ30AAPwYGRcXFxcDAwMDAwMDAwMLCwsKCgoDGBoACQ4LCwsFBQUD
        AwMDAwMDAwMYGBgWGBgAAf8UHBsGIywaGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgcGRQSIR0CBP0Y
        GRcLCwsICAgICAgICAgICAj///8GCAjl/v8AExkICAgICAgICAgICAgICAgICAgICAgWGBgAAOcZWXEk
        HhcYGRcYGBgYGBgYGBgYGBgYGBgYGBgaFxkWw+QDAvwYGRcMDAwLCwsLCwsLCwsLCwsLCwsLCwsJCwsA
        FhoAGB4LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsYGBgABP0aw+gUFR8YGBgYGBgYGBgYGBgYGBgcFxgD
        GBkDBe0JJioNDQ0ODg4ODg4ODg4ODg4ODg4ODg4ODg4MDg4AGh4AHCEODg4ODg4ODg4ODg4ODg4ODg4O
        Dg4ODg4ODg4IJSoFCO0WFRkUGRgYGBgYGBgYGBgYGBgjEx4bHCoVGh0QJiwOEBAQEBAQEBAQEBAQEBAQ
        EBAQEBAQEBAOEQ8CHSECHyQMERAQEBAQEBAQEBAQEBAQEBAQEBAQEBAMERAJJioLDyIXEiEPFxAYGBgY
        GBgYGBgYGBhTwvIEC/oUGRcSFRMFHyYTFBISFBQUFBQUFBQUFBQWFBQPFRAGICcOFRIPFRAEISYQFhEQ
        FRMUFBQUFBQUFBQQFRQUFREGICYSFhETGBcBAPxK0OghGBUYGBgYGBgYGBg8td8PJJcNGBwNHiELGRgS
        FhcGIycXFxcXFxcXFxcJJCgSFRkUHBwKHRoLFx0OIB8ZFRoMJCIXFxcXFxcXFxcMJSEUFxwRICIKFxkL
        HiMOGKE6w+kdFRwYGBgYGBgUJCoSFSQUGRgYGhocGRsZGhgRIiUSHiAcGRsMJiwVFhoZIiUNHiEWGxoa
        GhoYGhoTGxoPGyETJiMcFhsHJSofGB8TJiMOHBsWHRoYGhsaGhocFxkCDzUUGyoYGBgXGh8ZGBoAA//u
        9PP5/P8dHR0dHR0dHB4bHBoSJygEBTfc7/QZHhwdHR2oqqv4/fz4/fz4/P37///x/f/q+P79/P7t/fzy
        /fsfIB4lJSX4/fv4+//4+//w7f8ZGRkNICUdGRgJJywGAfcHCIICAIIPFBIgICAgICAgICAYHiMAAIDp
        9fcgIR+BgYEAAYEFBXEFBW8DBXEICHTj7f8FBW8GB28GB28BAH4XF4FPUE4AAIAFBXEFBW8FBXEVFIIX
        GRkdGRg3z+gHBswAAccBAsgAAMoiIyEiIiIiIiIiHygAAMvn8PkiIiLM0dQDAMwiIiIiIiIiIiIiIiJw
        c98ABcwAAs8ABM0JC81qdMhTUFIAAMwnJSQYGBgAAPgUGRwXGRkdGRgwxPIAAP4pKRsiJRwAA/qMi48n
        JycnJyclJyEAAP3j7PknJyfX0s8AAP4nJycnJycnJyeSlI4ABfTX1tJfW1pfW1pfXFgmHy5RU1QAAP0m
        KykYGBgEAPxDyO4XGRkdGRgGBP8ACO8YFxksLCYyItQCA/MqKycOCPsCAfsAAP0CAP0CAP1bWGEAAvcC
        AP0CAP0DAP3M3f4ABfYBAPwBAPwBAPwBAPzt9fVSVFQAAf0pLi0YGBgBAPoOdIYXGRkPJSsLGRMAAPgW
        GBgsLCwnMioqLSQsMSgsKiobNzcoLCYcNjYsKiolKi0rMC8sKiovKSovKSojLyMmKiQYODcpKiYYNzYs
        KycvKyYrLCocGroxLy4YGBgAAPMRIBwIIycYGBgIGhsAI0khHRgyMjIvLy8xLjDZ+PcvMzQlKyrf+/wt
        NTUqLzAhOj4oKCg7Ozurq6srLiwnQEQsNTLz+/shOj70+fotNTS0ys8vLy8vLy8sLzMYGBgIIEQbFxYT
        GhcYGBgaFxkMESASFZsTIiUhP0AxMzMsNDQmP0MyMjIuMzI0MjIvQkkkLi4tMjEoPT4pPUItMjMsNDQq
        P0E0My8yMzE0My8nPkArMzMsMTImPkQTKCoLEJEhHB4YGBgYGBgYGBgYGBgTGBkGC/QcFxgxNzYmQUU4
        NzM1NTU1NTU1NTU1NTUzNTU5NTQoQEYtNjk0NjYlQUI3NjI1NTU1NTU1NTU1NTU1NTU3NjIlQUIxNjUW
        GRcAAPUnHyAYGBgYGBgYGBgYGBgWFR8GGAsKEi8LJCY5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTko
        Q0cmQ0c5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTkQKS0RHDoEIyAdGBUYGBgYGBgYGBgYGBgYGBgA
        JzoJBO8MLR85OTk8PDw8PDw8PDw8PDw8PDw8PDw8PDw6PDwrRkooRUo8PDw8PDw8PDw8PDw8PDw8PDw8
        PDw8PDw0NDQMJCoWCfEAHkwUGRcYGBgYGBgYGBgYGBgYGBghFhgkGSMAAv4WGRc8PDw/Pz8/Pz8/Pz8/
        Pz8/Pz8/Pz89Pz8tSEwrSE0/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz88PDwYGRcBAP0hFx0dGBcYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgaGBcAc4gFBPwWGBg+Pj5CQkJCQkJCQkJCQkJCQkJAQkIxTFAvTFFCQkJCQkJC
        QkJCQkJCQkJCQkI/Pz8YGBgAAf8AaYQWGRcYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgNJioKZIIC
        AP4UHg4YGBhGRkZFRUVFRUVFRUVDRUUzTlI0TlRFRUVFRUVFRUVFRUVDQ0MWFxUYGRcAAf8KGCQJKS4U
        GBkYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGRcUHigDIC4JAOoMEy4YGRcYGBhJSUk+SEg8T1JK
        SEhKSkQ+TlRASEhEREQWGBgYGBgVGSQGB/c7pcoUHyMcGRUYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgNHBQAMz0XIy0ABe8SEJIWJyQcFxgYGBgYGRcYGBgYGBgaGxISIyYSHoMACvINEx4A
        KzkYFxkYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgUFxwNKSoW
        ECkJCy0AAPQDAfsCAP4AAv8AAP4AAP4UFR8aY4kue44dFB4dFxgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgaGBgUGRcUFxwJaoQSyek00vovYXMPGBsd
        GBUYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>